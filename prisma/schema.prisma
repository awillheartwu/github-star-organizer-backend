// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator prismabox {
  provider     = "prismabox"
  output       = "../src/generated/prismabox"
  typebox      = true
  useJsonTypes = true
  inputModels  = true
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

/// 归档原因
enum ArchivedReason {
  manual // 手动删除
  unstarred // 同步检测到已取消 star
}

/// GitHub 项目（来自 stars 同步）与用户侧标注信息
model Project {
  /// 主键，UUID
  id          String    @id @default(uuid())
  /// GitHub 项目的唯一 ID（来自 GitHub API）
  githubId    Int       @unique
  /// 仓库名称（如 star-organizer）
  name        String
  /// 仓库全名（如 user/star-organizer）
  fullName    String
  /// 仓库链接
  url         String
  /// 项目描述
  description String?
  /// 主语言
  language    String?
  /// Star 数量
  stars       Int       @default(0)
  /// Fork 数量
  forks       Int       @default(0)
  /// 最后一次提交时间（可选）
  lastCommit  DateTime?
  /// 最后同步时间
  lastSyncAt  DateTime  @default(now())
  /// 最近一次被同步任务“触达”的时间（内容未变也会更新）
  touchedAt   DateTime?

  // Custom info
  /// 用户备注
  notes        String?
  /// 是否标记为收藏
  favorite     Boolean     @default(false)
  /// 是否归档
  archived     Boolean     @default(false)
  /// 是否置顶
  pinned       Boolean     @default(false)
  /// 用户评分（可选）
  score        Int?
  /// 关联的视频链接（多对一）
  videoLinks   VideoLink[]
  /// 最新 AI 摘要（短）
  summaryShort String?
  /// 最新 AI 摘要（长）
  summaryLong  String?

  /// 项目关联的标签（多对多）
  tags ProjectTag[]

  /// 创建时间
  createdAt DateTime  @default(now())
  /// 更新时间（自动更新）
  updatedAt DateTime  @default(now()) @updatedAt
  /// 软删除时间（可选）
  deletedAt DateTime?

  AiSummary AiSummary[]

  // 🔽 索引区（新增）
  @@index([archived, createdAt]) // 常用 where archived=false 排序 createdAt
  @@index([archived, updatedAt]) // 最近更新
  @@index([stars])
  @@index([forks])
  @@index([score])
  @@index([language])
  @@index([lastCommit])
  @@index([lastSyncAt])
  @@index([touchedAt])
  @@index([name]) // name 模糊匹配也有帮助（SQLite 里作用有限，但保留可读性）
}

/// 历史 AI 摘要（便于追溯不同模型/时间的结果）
enum AiSummaryStyle {
  short
  long
}

/// AI 摘要历史记录
model AiSummary {
  /// 主键
  id        String  @id @default(uuid())
  /// 所属项目
  projectId String
  /// 外键
  project   Project @relation(fields: [projectId], references: [id])

  /// 摘要风格
  style   AiSummaryStyle
  /// 使用的模型
  content String
  /// 模型名称
  model   String?
  /// 模型版本
  lang    String?
  /// 使用的 tokens 数（可选）
  tokens  Int?

  createdAt DateTime @default(now())

  @@index([projectId, createdAt])
  @@index([style])
}

/// 标签表
model Tag {
  /// 主键，UUID
  id          String       @id @default(uuid())
  /// 标签名称（不再唯一，靠软删区分）
  name        String
  /// 标签描述（可选）
  description String?
  /// 拥有该标签的项目（多对多）
  projects    ProjectTag[]

  /// 是否归档
  archived  Boolean   @default(false)
  /// 创建时间
  createdAt DateTime  @default(now())
  /// 更新时间（自动更新）
  updatedAt DateTime  @default(now()) @updatedAt
  /// 软删除时间（可选）
  deletedAt DateTime?

  @@index([archived, createdAt]) // 常用 where archived=false 排序 createdAt
  @@index([name]) // name 模糊匹配也有帮助（SQLite 里作用有限，但保留可读性）
}

/// 项目-标签 关联表
model ProjectTag {
  /// 外键关联 Project
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  /// 外键关联 Tag
  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  @@id([projectId, tagId]) // 联合主键，确保 project 与 tag 的唯一组合
  // 🔽 常用连接方向都建索引
  @@index([projectId])
  @@index([tagId])
}

/// 视频链接
model VideoLink {
  /// 主键
  id        String  @id @default(uuid())
  /// 视频链接
  url       String
  /// 所属项目
  project   Project @relation(fields: [projectId], references: [id])
  /// 外键
  projectId String

  /// 是否归档
  archived  Boolean   @default(false)
  /// 创建时间
  createdAt DateTime  @default(now())
  /// 更新时间（自动更新）
  updatedAt DateTime  @default(now()) @updatedAt
  /// 软删除时间（可选）
  deletedAt DateTime?

  @@index([projectId])
  @@index([archived, createdAt]) // 常用 where archived=false 排序 createdAt
}

/// 用户角色
enum UserRole {
  USER
  ADMIN
}

/// 用户表
model User {
  /// 主键，UUID
  id           String   @id @default(uuid())
  /// 用户邮箱
  email        String   @unique
  /// 密码哈希
  passwordHash String
  /// 显示名称
  displayName  String?
  /// 用户角色
  role         UserRole @default(USER)
  /// 令牌版本（用于刷新令牌的无状态撤销）
  tokenVersion Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  refreshTokens RefreshToken[]

  @@index([createdAt])
  @@index([tokenVersion])
}

/// Refresh Token（仅存哈希）
model RefreshToken {
  id     String @id @default(uuid())
  /// 所属用户
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// 只存哈希（避免明文落库）
  tokenHash String @unique
  // 也可以用 jti（JWT ID）来唯一标识
  jti       String @unique

  /// 只存哈希（避免明文落库）
  revoked           Boolean   @default(false)
  /// 替换的令牌 ID（可选，用于单点登录等）
  replacedByTokenId String?
  /// 过期时间
  expiresAt         DateTime
  createdAt         DateTime  @default(now())
  revokedAt         DateTime?

  /// ip 地址与 user-agent（可选，用于审计）
  ip        String?
  userAgent String?

  @@index([userId])
  @@index([revoked, expiresAt])
  @@index([revoked, revokedAt])
}

/// 记录各类同步任务的游标与状态
/// 兼容多来源与多任务，通过 (source, key) 唯一定位。
model SyncState {
  id String @id @default(uuid())

  /// 同步来源：例如 'github:stars'
  source String

  /// 任务键：例如 'user:YOUR_GITHUB_USERNAME'
  key String

  /// 用于增量同步的游标（例如 GitHub starred_at 的 ISO 字符串）
  cursor String? // e.g. "2025-09-01T05:11:22Z"

  /// HTTP ETag（If-None-Match/304），可选加速
  etag String?

  /// 最近一次运行时间/成功时间/失败时间
  lastRunAt     DateTime?
  lastSuccessAt DateTime?
  lastErrorAt   DateTime?

  /// 最近一次错误信息（简要）
  lastError String?

  /// 最近一次统计信息（JSON 串，记录 created/updated 等）
  statsJson String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([source, key]) // 一个来源+键只保留一条状态
  @@index([source])
  @@index([updatedAt])
}

/// 归档的 Project 快照（允许同一 githubId 多次归档）
model ArchivedProject {
  id                String         @id @default(uuid())
  /// GitHub 项目 ID（非唯一，允许多次归档）
  githubId          Int?
  originalProjectId String?
  /// 归档理由
  reason            ArchivedReason
  /// 归档时的完整项目信息快照（JSON）
  snapshot          Json
  archivedAt        DateTime       @default(now())

  @@index([githubId])
  @@index([archivedAt])
  @@index([reason])
}
